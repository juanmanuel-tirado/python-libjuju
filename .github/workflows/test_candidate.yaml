name: Release candidate

# on:
#   schedule:
#     - cron: '0 0 * * *'
on: [push, pull_request]

jobs:
  integration:
    name: Integration
    timeout-minutes: 120
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
    - name: Check Juju release candidate version
      id: check-version
      run: |
        echo "::candidate-version snap info juju | grep 3.0/candidate | awk '{print $2}'"
      shell: bash
    - name: Cache Juju release candidate version
      id: cache
      uses: actions/cache@v3
      with:
        path: cache/version
        key: ${{ runner.os }}-${{ steps.check-version.outputs.candidate-version }}
    - name: Check out code
      uses: actions/checkout@v3
      if: steps.cache.outputs.cache-hit != 'true'
    - name: Setup operator environment
      uses: charmed-kubernetes/actions-operator@main
      with:
        provider: lxd
        juju-channel: 3.0/stable
      if: steps.cache.outputs.cache-hit != 'true'
    # - name: Set proxy in controller
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   run: |
    #     set -euxo pipefail
    #     # build a squid config file
    #     CONTROLLER_IP=$(juju list-controllers --format yaml | yq '.controllers[.current-controller].recent-server' | awk -F '[:]' '{print $1}');
    #     echo "Controller IP is: $CONTROLLER_IP"
    #     PROXY=$CONTROLLER_IP:3128
    #     echo "Proxy address is: $PROXY"
    #     echo "acl all src all" > squid.conf
    #     echo "http_access allow all" >> squid.conf
    #     echo "http_port $PROXY" >> squid.conf
    #     cat squid.conf
    #     # copy to the controller and reconfigure it
    #     juju status -m controller
    #     juju switch controller
    #     juju ssh 0 "sudo apt-get install squid -y"
    #     juju scp squid.conf 0:/tmp/squid.conf
    #     juju ssh 0 "sudo mv /tmp/squid.conf /etc/squid/squid.conf"
    #     juju ssh 0 "sudo squid -k reconfigure"
    #     # Test curl after waiting
    #     sleep 10
    #     echo "Test proxy access"
    #     curl -s -o /dev/null -w "%{http_code}" --proxy http://$PROXY https://charmhub.io
    #     # set model defaults
    #     juju model-defaults apt-http-proxy=$PROXY apt-https-proxy=$PROXY  juju-http-proxy=$PROXY juju-https-proxy=$PROXY  snap-http-proxy=$PROXY snap-https-proxy=$PROXY
    #     juju model-defaults
    # - name: Setup Python
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: ${{ matrix.python }}
    # - name: Install dependencies
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   run: pip install tox
    # - name: Run integration
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   # Force one single concurrent test
    #   run: tox -e integration -- -n 1
