name: Release candidate testing

# on:
#   schedule:
#     - cron: '0 0 * * *'
on: [push, pull_request]

jobs:
  candidate-integration:
    name: Candidate integration
    timeout-minutes: 120
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          # - "3.8"
          # - "3.9"
          - "3.10"
    steps:
    - name: Get latest tested release candidate
      uses: actions/download-artifact@v3
      with:
        name: juju-last-candidate-version
      # An error may happen the first time we run
      continue-on-error: true
    - name: Check if there is a new candidate
      shell: bash
      run: |
        candidate=$(snap info juju | grep 2.9/candidate | awk '{print $2}')
        last_tested=NA
        if [ -f juju-last-candidate-version ]; then
          last_tested=$(cat juju-last-candidate-version)
        fi
        next_test=NA
        if [[ "$candidate" == "^" ]]; then
          echo "No candidate to test"
        else
          if [[ "$candidate" == "$last_tested" ]]; then
            echo "Candidate $candidate was already tested"
          else
            echo "Candidate $candidate has to be tested"
            next_test="$candidate"
          fi 
        fi
        echo "next-test=$next_test" >> $GITHUB_ENV
        echo "$next_test" > ~/juju-last-candidate-version
    
    - name: Check out code
      uses: actions/checkout@v3
      if: ${{ env.next-test != 'NA' }}
    # - name: Setup operator environment
    #   if: ${{ env.next-test != 'NA' }}
    #   uses: charmed-kubernetes/actions-operator@main
    #   with:
    #     provider: lxd
    #     juju-channel: 3.0/candidate
    - name: Upload artifact
      if: ${{ env.next-test != 'NA' }}
      uses: actions/upload-artifact@v3
      with:
        name: juju-last-candidate-version
        path: ~/juju-last-candidate-version      
    # - name: Set proxy in controller
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   run: |
    #     set -euxo pipefail
    #     # build a squid config file
    #     CONTROLLER_IP=$(juju list-controllers --format yaml | yq '.controllers[.current-controller].recent-server' | awk -F '[:]' '{print $1}');
    #     echo "Controller IP is: $CONTROLLER_IP"
    #     PROXY=$CONTROLLER_IP:3128
    #     echo "Proxy address is: $PROXY"
    #     echo "acl all src all" > squid.conf
    #     echo "http_access allow all" >> squid.conf
    #     echo "http_port $PROXY" >> squid.conf
    #     cat squid.conf
    #     # copy to the controller and reconfigure it
    #     juju status -m controller
    #     juju switch controller
    #     juju ssh 0 "sudo apt-get install squid -y"
    #     juju scp squid.conf 0:/tmp/squid.conf
    #     juju ssh 0 "sudo mv /tmp/squid.conf /etc/squid/squid.conf"
    #     juju ssh 0 "sudo squid -k reconfigure"
    #     # Test curl after waiting
    #     sleep 10
    #     echo "Test proxy access"
    #     curl -s -o /dev/null -w "%{http_code}" --proxy http://$PROXY https://charmhub.io
    #     # set model defaults
    #     juju model-defaults apt-http-proxy=$PROXY apt-https-proxy=$PROXY  juju-http-proxy=$PROXY juju-https-proxy=$PROXY  snap-http-proxy=$PROXY snap-https-proxy=$PROXY
    #     juju model-defaults
    # - name: Setup Python
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: ${{ matrix.python }}
    # - name: Install dependencies
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   run: pip install tox
    # - name: Run integration
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   # Force one single concurrent test
    #   run: tox -e integration -- -n 1
